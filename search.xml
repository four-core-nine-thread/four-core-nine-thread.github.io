<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[__str__与__repr__区别]]></title>
    <url>%2F2020%2F02%2F17%2Fstr-%E4%B8%8E-repr-%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[首先通过代码来对比一下 str 和 repr 只存在 str: 123456789class DisplayTest: def __str__(self): return 'output_by_str' &gt;&gt;&gt; test = DisplayTest()&gt;&gt;&gt; test&lt;DisplayTest object at 0x000002A101128940&gt;&gt;&gt;&gt; print(test)output_by_str 只存在 repr: 12345678class DisplayTest: def __repr__(self): return 'output_by_repr'&gt;&gt;&gt; test = DisplayTest()&gt;&gt;&gt; testoutput_by_repr&gt;&gt;&gt; print(test)output_by_repr 同时存在 str 和 repr: 12345678910class DisplayTest: def __str__(self): return 'output_by_str' def __repr__(self): return 'output_by_repr'&gt;&gt;&gt; test = DisplayTest()&gt;&gt;&gt; testoutput_by_repr&gt;&gt;&gt; print(test)output_by_str 从以上代码中可以看出，在控制台输出对象时会调用 repr 方法，在使用print进行输出打印时会优先调用 str 方法，如果没有 str 方法，就会去调用 repr 方法。 如果在自定义类中没有重构str,repr方法，就会使用object基类中str,repr方法，输出对象一些地址相关的信息如： 1&lt;DisplayTest object at 0x000002A101128940&gt; 对于这两种方法，就像网上所说的那样， str 是面向用户， repr 是面向程序员的，比如： 12345&gt;&gt;&gt; test = '你好'&gt;&gt;&gt; test'你好'&gt;&gt;&gt; print(test)你好 12345import datetima&gt;&gt;&gt; datetime.datetime.now()datetime.datetime(2020, 2, 17, 23, 48, 37, 449751)&gt;&gt;&gt; print(datetime.datetime.now())2020-02-17 23:48:47.938524 print输出的内容，更直观更容易理解一些，而直接使用终端输出的内容，让程序员更方便处理一些。 还需要注意的一点是，将对象放入容器中时，就算重构了 str 方法，进行print也是不会生效的，容器会使用 repr 中的返回值，比如： 1234567class DisplayTest: def __str__(self): return 'output_by_str'&gt;&gt;&gt; test_1 = DisplayTest()&gt;&gt;&gt; test_2 = DisplayTest()&gt;&gt;&gt; print([test1, test2])[&lt;DisplayTest object at 0x000002A100BCA588&gt;, &lt;DisplayTest object at 0x000002A100EFE630&gt;] 1234567class DisplayTest: def __repr__(self): return 'output_by_repr'&gt;&gt;&gt; test_1 = DisplayTest()&gt;&gt;&gt; test_2 = DisplayTest()&gt;&gt;&gt; print([test1, test2])[output_by_repr, output_by_repr] 大部分的内建函数都会通过str, repr来输出实质相同但显示不同的值，或许这是作者想让代码更加pythonic吧，为我们提供一种设计代码的标准。 对于我自己来说，我更愿意在自定义类中去只设定一个 repr ，因为它能同时兼顾终端输出和print输出，就像汽车的远光灯，同样具备近光灯的效果，但更远更亮。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java中xml解析---dom4j]]></title>
    <url>%2F2018%2F05%2F10%2FJava%E4%B8%ADxml%E8%A7%A3%E6%9E%90-dom4j%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu远程连接MySQL(connection refused)解决方法]]></title>
    <url>%2F2018%2F01%2F27%2FUbuntu%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5MySQL-connection-refused-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[连接阿里云数据库的时候.端口,正常配置都完成的情况下,依然显示connection refused. 解决这个问题需要进入vim /etc/mysql/mysql.conf.d/mysqld.conf中将 1# bind-address = 127.0.0.1 这句话注释掉就可以解决这个问题]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TDD流程]]></title>
    <url>%2F2018%2F01%2F25%2FTDD%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[在一个项目中使用到TDD来完成测试首先需要知道该干什么,如何去干,查询资料归纳了一下TDD工作的整个流程,因为没有找到XMind中的流程图,所以只好手动画了. TDD的总体流程: 包含功能测试和单元测试的TDD流程: 功能测试是应用是否能正常运行的最终评判,而单元测试只是整个开发过程中的一个辅助工具,不难看出,面对用户的FT是衡量一个应用是否被用户正常使用的判断标准.]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试,Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu更新pip后无法导入main解决方法]]></title>
    <url>%2F2018%2F01%2F22%2FUbuntu%E6%9B%B4%E6%96%B0pip%E5%90%8E%E6%97%A0%E6%B3%95%E5%AF%BC%E5%85%A5main%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[使用阿里云的Ubuntu镜像之后,进行pip的更新,更新完成之后进行pip安装模块会出现 1ImportError: cannot import name main 这个问题需要修改/usr/bin/pip文件中,修改成 123456from pip import mainif __name__ == '__main__': sys.exit(main()) 安装pip3的时候好像也是这个问题,修改相应的配置文件就可以使用了]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[编程就像从井里打水]]></title>
    <url>%2F2018%2F01%2F20%2F%E7%BC%96%E7%A8%8B%E5%B0%B1%E5%83%8F%E4%BB%8E%E4%BA%95%E9%87%8C%E6%89%93%E6%B0%B4%2F</url>
    <content type="text"><![CDATA[编程对每个人来说都不是一件容易的事,如果说成功源于一个人的努力和聪明才智,那像我这样不那么聪明的人,TDD就能助我一臂之力. TDD的创始人Kent Beck打了个比方.试想从井里提一桶水,如果井不太深,而且桶不是很慢,提起来很容易,就算提满满的一桶水,刚开始也很容易,毕竟井并不深,但是如果井很深呢?我们能一次性把水给提上来吗?力气大的人或许可以,但是所有人都是大力士吗?TDD理念就好比是一个棘轮,使用它可以保存当前的进度,休息一会,而且能保证进度绝不会倒退,也并不需要我是大力士. 当然TDD的使用也是区别情况的,但大多数一个商业项目都是复杂的,并不都是像浅井那样一次性提满水,不过在一口浅井中使用棘轮就显的有点傻.]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试,Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识TDD]]></title>
    <url>%2F2018%2F01%2F15%2F%E5%88%9D%E8%AF%86TDD%2F</url>
    <content type="text"><![CDATA[Python的魅力不仅在于简洁的语法和作为胶水一样和其他语言进行粘合,我最崇拜的是其几乎是无所不能的三方库,至少在我看来,拥有良好生态的python前途是一片光明的. 在工作大半年之后,也学习了Django,Flask这样主流的python框架,我开始思考接下来的时间里我需要去发展的方向,我很明确我的最终目标肯定是在程序员顶端的大数据和AI,但是目前的我来说,他们距离我太遥远,我连numpy,pandas都还一头雾水,更不说去完成数据的处理了. 最近和同事聊天说到测试这一块,我对于测试的理解仅仅限于手动去测试某些功能,就像工人测试一块遥控器会一个按钮一个按钮的按.我承认我负责的模块不是很难,很多问题都可以通过debug去解决为什么还需要测试这玩意呢? 同事给我看了曾经项目的一个业务,我看的不是很懂,所以应该是很复杂的,复杂到他说想要去修改一部分代码都很困难,开始巴拉巴拉说了一些使用TDD的好处. 他给我介绍到了TDD,也觉得往这方面发展也是对于写框架的一种提升,虽然当时我并不是很理解TDD的概念,但是明白最简单的一点,使用测试驱动开发就是需要’’测试,小幅改动,测试’直到代码完全正常,使用功能测试去模拟用户,使用单元测试来模拟程序员,使用是自动化测试来测试整个项目而不是在这儿点点链接,在输入框中输入点信息. 说到TDD肯定就会说到敏捷开发,因为他们是密不可分的,有时候我并不需要将产品的所有功能都实现才上线,就现在的环境,谁先推出项目谁先占领市场谁才会笑到最后. 这是我第一次认识到TDD,虽然肤浅,但是对于测试我有了重新的认识.]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试,Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Flask与Django对比]]></title>
    <url>%2F2018%2F01%2F07%2FFlask%E4%B8%8EDjango%E5%AF%B9%E6%AF%94%2F</url>
    <content type="text"><![CDATA[Django:我个人更喜欢使用Django,因为我能想到的,它基本都帮我完成了,它会告诉我需要在哪个文件中写什么,也会明确的告诉我在哪里出现了错误. Django体系庞大,自带功能完善的ORM和模板引擎,在灵活上和自由度上不够高,把我们的行动范围限制在了它准备好的框架中 使用Django开发小应用有一种使用Scapy去爬取小网站的感觉,大材小用. Django与SQL耦合度过高,与NoSQL的搭配并不好. Django适合企业级的网站开发:快速,安全,稳定 Django比Flask更成熟,完善,但是生态相对封闭 Django的官网比Flask好看太多. 这些只是Django优点的一部分,百度上还有很多. Flask第一次使用Flask时,我真的不知所措,我不知道在哪里需要干什么,文件到底放在哪里,代码应该放在哪个py文件中,我觉得大牛应该更喜欢Flask,因为它提供了一个自由发挥的场地,大牛们可以随意发挥不受拘束. Flask没有Django那么重,更为自由,灵活 很适合小型应用,开发大型应用时,需要开发者有较强的能力和经验 在性能方面都会比Django要好 与关系型数据库的匹配不弱于Django,但在NoSQL方面的匹配要强于Django]]></content>
      <tags>
        <tag>Flask, Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络体系结构]]></title>
    <url>%2F2018%2F01%2F01%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[法律上的国际标准(由OSI制定) 应用层 表示层 会话层 运输层 网络层 数据链路层 物理层 事实上的国际标准 应用层 运输层 网际层 网络接口层 因为各种原因,由OSI制定的法律标准并没有被使用,而是使用较早出现的四层体系结构. 应用层和运输层是开发者面对最多的层次,在应用层中我们主要关心的是应用与用户之间交互,而运输层我们更关系的数据以何种方式去传输,是需要可靠传输呢,还是不可靠传输,都需要根据情况而定.]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写点简单的装饰器]]></title>
    <url>%2F2017%2F12%2F28%2F%E5%86%99%E7%82%B9%E7%AE%80%E5%8D%95%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8%2F</url>
    <content type="text"><![CDATA[一个计算函数运行时间的装饰器: 12345678import datetimedef cal_time(func): def cal_func(*args, **kargs): start = datetime.datetime.now() result = func(*args, **kargs) end = datetime.datetime.now() print('cost_time:', (end - start).microseconds) return cal_func 1234@cal_timedef add(a, b)add(1, 2) 在访问网页时判断用户是否登陆: 1234567891011121314151617from django.http import HttpResponseRedirectfrom django.core.urlresolvers import reversefrom user.models import Usersdef is_login(func): def check_login(request): # 如果登陆,返回函数func ticket = request.COOKIES.get('ticket') if not ticket: # 没有登陆,跳转到登陆页面 return HttpResponseRedirect(reverse('user:login')) user = Users.objects.filter(ticket=ticket) if not user: return HttpResponseRedirect(reverse('user:login')) return func(request) return check_login 这里是使用的ticket来模拟session id,没有使用Django自带的request.session,通过判断请求中的seesion id是否存在以及与session是否一致来判断用户是否登陆,可以放在需要登陆才能访问的视图函数之前. 在Django中实现判断用户是否登陆还可以中间件来实现,方法多样.]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[对内置装饰器的理解]]></title>
    <url>%2F2017%2F12%2F21%2F%E5%AF%B9%E5%86%85%E7%BD%AE%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E7%90%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[装饰器就是用函数来包装函数,对内函数赋予一些我们所需要的功能,Python有三个内置的装饰器:staticmethod,classmethod和property,这三个装饰器都是和类相关的. @staticmethond一般情况,要使用类的方法,需要先实例化一个对象再调用方法,使用staticmethod(静态方法)之后,可以直接使用类来进行方法的访问,不需要事先进行实例化,这样做的好处就是可以将属于这个类的函数放到静态方法中 123456789101112131415161718class test(object): class_arr = 1 # 对象方法 def A(self): print('A') # 静态方法 @staticmethod def B(): print('B')# 实例化对象foo = test()foo.A()foo.B()test.B()test.A() 1234567ABBTraceback (most recent call last): File "C:\Users\29427\Desktop\reivew.py", line 36, in &lt;module&gt; test.A()TypeError: A() missing 1 required positional argument: 'self' 可以看出,使用静态方法装饰的方法,类可以直接访问,而没有被装饰的方法,类是无法访问的,并且装饰的方法是不用传入self的 @classmethod类方法和静态方法很相似,区别在于静态方法装饰的方法是不需要传入self的,而类方法装饰的方法是需要传入一个隐式的对象作为参数,这个隐式的对象在有继承时表示相应的子类,在无继承时表示当前类 12345678910111213141516171819202122232425262728293031323334class Parent(object): @staticmethod def staticSayHello(): print ("Parent static") @classmethod def classSayHello(cls): if cls == Boy: print ("Boy classSayHello") elif cls == Girl: print ("girl sayHello")class Boy(Parent): pass class Girl(Parent): passBoy.classSayHello()Girl.classSayHello() 12Boy classSayHellogirl sayHello 可以看出这个隐式的类参数可以进行类的区分 @property该装饰器可以将方法变成属性,在进行访问时就不能像访问方法那样进行访问,要用访问属性的方式进行访问 123456789101112131415161718class Student(object): @property def score(self): return self._score @score.setter def score(self,value): if not isinstance(value, int): raise ValueError('分数必须是整数才行呐') if value &lt; 0 or value &gt; 100: raise ValueError('分数必须0-100之间') self._score = values = Student()s.score = 60 s.set_score(60)s.score s.get_score() 使用property来装饰score时会自动创建一个新的setter装饰器,使用setter可以对属性进行赋值,这样做的话,对一个属性的查询和修改就会简单很多.]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[亲爱的Python，你为什么这么难看？]]></title>
    <url>%2F2017%2F12%2F20%2F%E4%BA%B2%E7%88%B1%E7%9A%84Python%EF%BC%8C%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E9%9A%BE%E7%9C%8B%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[Dear Python, Why Are You So Ugly?by Jess Johnson in Programming Languages Dear Python, something has been bothering me for a while. Its just that, well, ummm…you’re kind of ugly. Look, you are beautiful inside: Python is a beautiful language and the Python community is open and welcoming. But Python resources are ugly enough to affect usability and adoption. This is damaging to the community. Documentation and tutorials are often difficult to navigate. Products built with Python don’t put any thought into design. Blogging software written in Python helps create more ugly blogs about Python. Pythonistas just don’t care about presentation. Let’s compare the usability and design of some different Python and Ruby sites. Ruby is a good reference point since it occupies a similar niche in the programming language ecosystem and is roughly the same age. Above are online interactive tutorials for learning Python vs. Ruby. Learnpython.org isn’t ugly exactly, it’s just that Try Ruby is so much more polished. It’s obvious that a professional designer had a hand in Try Ruby, whereas the design of learnpython.org was thrown together by a programmer who later slapped a few ads on it and called it done. Which tutorial would you rather use? Here are the homepages for Django and Ruby on Rails, popular web frameworks. Django’s homepage is poorly organized. The entire page is just a mess of links with no clear emphasis on anything. In contrast, the Ruby on Rails homepage does a good job of introducing people to Rails and pointing them to different areas of the site. Homepage of Django co-creator Adrian Holovaty vs. Ruby on Rails creator David Heinemeier Hansson. Both are well organized, but it is obvious at a glance who places importance on professional design and who doesn’t. Cloud hosting: Google App Engine vs. Heroku. Once again the Ruby side is sexier. Python blogging software vs Ruby blogging software. The Python blog designs are uninspiring and unpolished, while the Ruby designs are striking. And who doesn’t love octopodes? Some top Google search results for “python consulting” vs. “ruby consulting”. The Python results look painfully outdated. Maybe Ruby has an advantage because it is more tightly focused on web programming? It seems likely that consultants for web apps would have nicer web pages than consultants working on, say, scientific problems. To eliminate any unfair advantage, below are some top Google search results for “django consulting” vs. “ruby on rails consulting”. It doesn’t matter. Python is still the ugly duckling. This wasn’t a scientific comparison – somebody could try show the opposite conclusion by cherry-picking a different set of sites – but I think the screenshots I used are pretty representative. I also think that most people who have spent a little bit of time in both communities will agree that Python sites are ugly compared to Ruby sites. Why does this happen?Either Pythonistas aren’t pairing with designers as often as Rubyists, Pythonistas have less design talent, or Pythonistas simply don’t care enough about design to spend the time to do it right. I’m not really sure which is the case. Does it matter?Yes! This stuff matters. It’s not just that Python sites are ugly (even though they are). It’s that the uglyness makes sites hard to navigate and hard to use. It’s that nobody is inspired by uglyness and nobody wants to use ugly products when there are better options. Nobody wants to hire someone who builds ugly web apps. It is unprofessional and sloppy to be so ugly. This damages the Python community. 这是外国程序员把Python相关站点和Ruby相关站点的UI对比,Python基本完败,感觉就像把一个出生在60年代的老年人和一个出生在21世纪的青年人穿衣风格做对比,上次去访问scipy的官网,我是真的搞不懂,一个做人工智能数据分析的公司页面会这么丑,难道他们就真的要把程序员的那种风格表现出来吗?]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life,Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[事不过三,三则重构]]></title>
    <url>%2F2017%2F12%2F15%2F%E4%BA%8B%E4%B8%8D%E8%BF%87%E4%B8%89-%E4%B8%89%E5%88%99%E9%87%8D%E6%9E%84%2F</url>
    <content type="text"><![CDATA[如果一个功能在代码中出现次数超过三次,就需要将该功能封装起来在需要的地方调用,及时闻到代码的坏味道是成为一名优秀程序员的必备技能.]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django自带的一整套登陆注册权限角色]]></title>
    <url>%2F2017%2F12%2F10%2FDjango%E8%87%AA%E5%B8%A6%E7%9A%84%E4%B8%80%E6%95%B4%E5%A5%97%E7%99%BB%E9%99%86%E6%B3%A8%E5%86%8C%E6%9D%83%E9%99%90%E8%A7%92%E8%89%B2%2F</url>
    <content type="text"><![CDATA[在写登陆注册时,一般有两种方法,一种是直接使用Django的auth模块,另外一种就是自己模拟实现session和session id,前者的弊端就是字段固定,需要扩展时需要进行重写,后者就是自己造轮子,费时费力,设计的可能并没有Django那么好,但是可以精确控制字段,扩展度高,就来说说auth模块吧. UserUser是auth模块中维护用户信息的关系模式,在数据库中被命名为auth_user,使用migrate会自动生成. 创建User表的SQL语句: 123456789101112CREATE TABLE &quot;auth_user&quot; ( &quot;id&quot; integer NOT NULL PRIMARY KEY AUTOINCREMENT, &quot;password&quot; varchar(128) NOT NULL, &quot;last_login&quot; datetime NULL, &quot;is_superuser&quot; bool NOT NULL, &quot;first_name&quot; varchar(30) NOT NULL, &quot;last_name&quot; varchar(30) NOT NULL, &quot;email&quot; varchar(254) NOT NULL, &quot;is_staff&quot; bool NOT NULL, &quot;is_active&quot; bool NOT NULL, &quot;date_joined&quot; datetime NOT NULL, &quot;username&quot; varchar(30) NOT NULL UNIQUE) 在导入该时需要这样写,需要区别时是自带的还是自己写的 1from django.contrib.auth.models import User 创建用户12user = User.objects.create_user(username, password)user.save() 这里就是和普通ORM操作有所区别,通常使用了create之后就不需要.save就可以保存,这里需要执行.save来进行保存,auth模块会自动加密我们的密码.如果不用自带的User,需要加密解密时时就要用到 1234# 加密make_password()# 解密check_password() 认证用户12from django.contrib.auth import authenticateuser = authenticate(username=username, password=password) 认证成功返回True,认证失败返回Flase,一般在登陆时使用. 修改用户密码12user.set_password(new_password)user.save() 这样可以配合中间件验证是否登陆,登陆的话可以进行修改密码. 登陆1234567# 导入模块from django.contrib.auth import login# 验证用户信息user = authenticate(username=username, password=password)if user is not None: # 登陆 login(request, user) 使用login登陆成功之后,会设置session中的值,对用户进行跟踪,这里需要注意的是,没有使用login模块来进行登陆的话就需要使用 1request.session['xxx'] = xxx 注销123from django.contrib.auth import logoutdef logout_view(request): logout(request) 如果不适用logout来尽心注销,就需要使用 1del request.sessionp['xxx] 来删除session 这只是Django中模块的冰山一角,其中还有很多它帮我们造好的轮子,比如权限判断,限制登陆才能访问等.]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django反向建模]]></title>
    <url>%2F2017%2F12%2F03%2FDjango%E5%8F%8D%E5%90%91%E5%BB%BA%E6%A8%A1%2F</url>
    <content type="text"><![CDATA[从model到数据库的正向迁移通过model然后使用makemigrations可以将模型中的类迁移到数据库,一个类就对应一张表,这种方式也是建立数据库最快速的方法,但是有一个弊端就是会添加一些Django自带的表,很多时候并不需要这些自带表 1234# 将数据添加到缓存python manage.py makemigrations# 添加到数据库python manage.py migrate 从数据库到model的反向建模使用powerdesigner创建数据库模型,它基本支持目前所有的关系型数据库,提供了企业级的建模和设计解决方案,需要注意的是powerdesigner中设置主键为自增需要手动设置,并不是默认行为. 通过逻辑模型然后生成物理模型然后生成sql语句就可以在相应的数据库中创建数据,当有了这些数据之后,可以将数据库中中表在Django的模型中生成相应的class 1python manage.py inspectdb &gt; user/model.py 通过上述语句,就可以将连接的数据库中的数据在模型中生成相应的class.]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[不仅仅在视图中的反向查询]]></title>
    <url>%2F2017%2F11%2F30%2F%E4%B8%8D%E4%BB%85%E4%BB%85%E5%9C%A8%E8%A7%86%E5%9B%BE%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%90%91%E6%9F%A5%E8%AF%A2%2F</url>
    <content type="text"><![CDATA[以往使用Django提供的ORM功能都是通过在视图操作模型来实现数据库的增删改查,在这个过程中,带有外键约束的那一方为正方,正方关联的那一方为反方,通过外键去访问关联对象就是正向查询,而不带外键的那一方去访问关联对象就是反向查询,当然这些都是很基本的开发技能. 123456class List(models.Model): passclass Item(models.Model): text = models.TextField(default='') list = models.ForeignKey(List, default=None) 123456# 正向查询item = Item.objects.all().first()list_ = item.list.title# 反向查询list_ = List.objeacts.get(id=1)item = list_.item_set.all() 这种查询不仅仅可以在视图中进行,Django的模板引擎让我可以在模板中同样能够进行ORM操作,不仅仅局限在view当中 123&#123;% for item in list.item_set.all %&#125; &#123;&#123; item.text &#125;&#125;&#123;% endfor %&#125; 这样大大提高的查询数据的灵活性,不把ORM操作局限在某一块地方.]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[替换回调函数]]></title>
    <url>%2F2017%2F11%2F25%2F%E6%9B%BF%E6%8D%A2%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[使用re.sub来进行复杂的字符串替换时,只能将某一个或某几个字符替换称一样的字符串例如 1234import retext = 'UPPER PYTHON, lower python, Mixed Python'res = re.sub('python', 'snake', text, flags=re.IGNORECASE)print(res) 1UPPER snake, lower snake, Mixed snake 可以看到,替换的字符串并没有按照以前的大小写顺序来进行替换,都被统一替换成了snake,如果需要按照以前的大小写的顺序来替换的话,就需要使用到替换回掉函数,如 123456789101112131415161718import retext = 'UPPER PYTHON, lower python, Mixed Python'def matchcase(word): def replace(m): text = m.group() if text.isupper(): return word.upper() elif text.islower(): return word.lower() elif text[0].isupper(): return word.capitalize() else: return word return replaceres = re.sub('python', matchcase('snake'), text, flags=re.IGNORECASE)print(res) 函数replace是我们的替换回调函数,输入的参数是一个匹配对象,由match()或find()返回,我们可以从debug中看出其工作流程 它会将匹配的对象依次去进行大小写的对比,然后再进行替换并返回正确的替换结果.]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[区分通配符与正则表达式]]></title>
    <url>%2F2017%2F11%2F19%2F%E5%8C%BA%E5%88%86%E9%80%9A%E9%85%8D%E7%AC%A6%E4%B8%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[通配符在Linux中遇见的比较多,CSS里面也有,而正则表达式范围就更广了,相比于通配符也更复杂,这两者中使用了一些相同的符号来实现匹配,但是同样的符号意义却不一样,在Python中通配符和正则也处于不同的模块中. 正则表达式正则的概念也不用我多说,基本每个程序员都会使用到,我说说这里面几个和通配符一样的符号,并对他们的意义作出区别,使用markdown有些符号不能单独打出,我居然发现这里面还可以使用转义字符,神奇. *:匹配前面的子表达式0次或者n次(n∈(0,∞)),属于贪婪匹配,例如fo*,能匹配到fo,foo等,等同于fo{0,} ?:匹配前面的子表达式0次或者1次,例如li(ke)?,能匹配到li,like,等同于{0,1} []:匹配一个指定范围的字符,例如[ab]cd,可以匹配到acd,bcd {}:指定匹配子表达式的个数,有三种形式{n},{n,},{n,m}. python中使用正则表达式需要导入的模块是re 1import re 通配符通配符一般在shell中使用,功能和正则表达式相比要弱很多,一般只用于文件名匹配,匹配方法有点介于简单的字符串方法和全功能的正则表达式之间. 可以在简单的数据处理中使用,注意区别符号的含义 *:星号代替0个,单个,多个字符,可以单独使用,例如*.py,可以匹配到所有后缀为.py的文件. ?:问号代替一个字符,可以单独使用,例如typor?,可以匹配到typora等文件. python中要使用通配符需要导入的模块是fnmatch 12345from fnmatch import fnmatchcaseresult_1 = fnmatchcase('test.py', '*.py')result_2 = fnmatchcase('test.py', 'tes?.py')print(result_1)print(result_2) 12TrueTrue 通过比较可以看出,正则中的*和?是无法单独存在,必须和子表达式同时出现作为一个匹配的规则,而通配符中的*和?是可以单独存在的代替一个或多个字符.]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Linux,Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[筛选爬取的url的几种方法]]></title>
    <url>%2F2017%2F11%2F11%2F%E7%AD%9B%E9%80%89%E7%88%AC%E5%8F%96%E7%9A%84url%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[最近学习爬虫去获取淘宝页面中每个商品的url时,得到的信息中有很多无用的url,所以就想使用一些方法将这些无用的url筛选掉. 比如我需要获取的url必须是http和https开头的,至少有三种方法可以帮助我去获得所需信息. 首先是str.startswith()和str.endswith()方法,爬虫获取的url一般是以数组来呈现的,所以在使用这两个方法之前需要先处理一下,并且还有一个坑的地方是传入的判断条件如果是列表形式的话,会出现报错,改成元组之后就没问题. 传入列表出现报错: 123url = ['http://wwww.baidu.com', 't.taobao.com']need_url = [i for i in url if i.startswith(['http', 'https'])]print(need_url) 1TypeError: startswith first arg must be str or a tuple of str, not list 传入元组: 123url = ['http://wwww.baidu.com', 't.taobao.com']need_url = [i for i in url if i.startswith(('http', 'https'))]print(need_url) 1['http://wwww.baidu.com'] 这样就可以筛选出所需的url. 除了str.startswith()和str.endswith()以后,还可以通过切片和正则表达式的方式来判断获取的url,但是这两种方法相比上述的方法就有杀鸡焉用牛刀的感觉,而且也不是那么的优雅. 使用字符串的切片: 123url = ['http://wwww.baidu.com', 't.taobao.com']need_url = [i for i in url if (i[:5] == 'https' or i[:4] == 'http')]print(need_url) 1['http://wwww.baidu.com'] 这种方法我感觉太笨重,给人一种很死的感觉. 使用re来完成匹配: 1234567import reurl = ['http://wwww.baidu.com', 't.taobao.com', 'https://www.taobao.com']need_info = []for i in url: if re.match(r'http|https', i): need_info.append(i)print(need_info) 1['http://wwww.baidu.com', 'https://www.taobao.com'] 哇,很简单的两句就能写完的,我居然写了8句,感觉有点像让一个高中生去做小学生的题一样,小学生想的简单做的就简单,高中生想的复杂写的复杂.]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[字典使用ChainMap与update的区别]]></title>
    <url>%2F2017%2F11%2F05%2F%E5%AD%97%E5%85%B8%E4%BD%BF%E7%94%A8ChainMap%E4%B8%8Eupdate%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[ChainMap提供了一种从逻辑上将不同的字典或者映射合并为一个单独的映射,而字典中自带的update方法也可以字典合并,通过比较这种不同的方法,可以在不同的场合选用不同的方法来进行映射的处理. ChainMap: 123456789from collections import ChainMapa = &#123;'x': 1, 'y': 2&#125;b = &#123;'z': 3, 'w': 4, 'x': 5&#125;c = ChainMap(a, b)print(c)a['x'] = 10b['z'] = 10print(c)print(c['x']) 123ChainMap(&#123;'x': 1, 'y': 2&#125;, &#123;'z': 3, 'w': 4, 'x': 5&#125;)ChainMap(&#123;'x': 10, 'y': 2&#125;, &#123;'z': 10, 'w': 4, 'x': 5&#125;)10 可以看到,合并后的字典中的值是与原始字典联系在一起的,原始字典改变合并后的字典也会同时变化,并且当两个原始字典中有重复的键时,ChainMap会默认现在第一个字典中的值,当然合并后的ChainMap对象支持所有的字典的操作. update: 123456789a = &#123;'x': 1, 'y': 2&#125;b = &#123;'z': 3, 'w': 4, 'x': 5&#125;c = ac.update(b)print(c)a['y'] = 10b['w'] = 10print(c)print(c['x']) 123&#123;'x': 5, 'y': 2, 'z': 3, 'w': 4&#125;&#123;'x': 5, 'y': 10, 'z': 3, 'w': 4&#125;5 从上述代码可以看出,字典的update方法是在原始字典的基础上进行合并的,更准确的说,这应该是将一个字典按照另外一个字典进行更新,相同的键会更新为后一个字典中的值,并后一个字典在之后的进行更改后并不会影响合并后的字典. 总结区别: ChainMap合并后的新字典键值对改变不会影响原字典,而update是在一个字典的基础的进行合并,破坏了原始字典. ChainMap产生的字典对象中的键值会随原始字典的变化而变化,update更新后的字典就是原始字典,与参考更新的字典没有任何关系. 遇到相同的键,ChainMap总是将第一个字典的这个键的值作为合并后字典的值,而update刚好相反,它会采用后一个字典的值]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web开发第一道难关]]></title>
    <url>%2F2017%2F11%2F01%2FWeb%E5%BC%80%E5%8F%91%E7%AC%AC%E4%B8%80%E9%81%93%E9%9A%BE%E5%85%B3%2F</url>
    <content type="text"><![CDATA[cookie和session对我来说并不陌生,以前读书的时候开电脑的第一件事就是打开360清理垃圾,里面有一栏会提示是否清除cookie,当时我并不知道这玩意用来干嘛,随意基本都是每次都会清除. 最近在写登陆注册,遇到了cookie的session,并不是很理解,百度百科讲有太过于专业,看着很难理解,百度了很久结合了很多答案,再加上自己的理解,来记录一下以便好对比对错. Session的概念Session存放于服务器端用于存放用户信息,当用户第一次发送请求时,服务器会自动生成一个Session和Session ID用来记录这个用户,并在响应中附带这个Session ID返回到浏览器. 当用户第二次去请求服务器时.在请求中就会附带这个Session ID,服务器在获取这个ID后就会去数据库中对比Session,从而获取到用户的信息. 浏览器中保存这个Session ID有多种方式,但是我只遇到过使用cookie来保存所以就暂时说明这种方式: 服务器将Session ID发送到浏览器后.cookie将这个ID保存,如果不设置过期期限的话,当用户关闭浏览器后,就会自动清除这个ID,如果设置了过期期限,这个cookie就会保存到硬盘中,以便下次读取. Cookie的概念可以称之为’浏览器缓存’,它是在Web服务器保存在浏览器上的小文本文件,用于保存信息,但是保存的信息大小不能超过4K. Cookie与Session的区别cookie是存储在浏览器上,而session是保存在服务器上的,当我们访问服务器时,会将cookie中存储的session ID取出发往服务器,然后再根据这个ID查询相应的session从而获取用户信息.cookie一般用于判断用户是否登陆,以便下次能够直接登陆,还有就是能够保存我们浏览购物网站放入购物车的商品的信息还有一些搜索信息. session是存储于服务器上的,所以无法伪造,而cookie是存在于本地的,所以可以被伪造,从安全性的角度来说,sessio是安全的,而cookie是不安全的.session一般用于验证登陆信息,存储一些私人或者比较重要的信息. Cookie与Sesssion的联系Cookie属于Session对象的一种,Session ID的存储依赖于Cookie.]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Postman模拟发送POST请求403问题]]></title>
    <url>%2F2017%2F10%2F26%2FPostman%E6%A8%A1%E6%8B%9F%E5%8F%91%E9%80%81POST%E8%AF%B7%E6%B1%82403%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[最近在写登陆注册时用到Postman来模拟提交表单,因为Django自带的CSRF保护机制,需要在所有的POST请求中附带上csrftoken,所以进行模拟发送POST请求时会一直显示403错误,并且在控制台中也会显示下面错误提示 1Forbidden (CSRF token missing or incorrect.) 经过测试,发现只有通过浏览器去访问Django服务器时才会获取到这个’csrftoken’,如果Django站点只提供API而没有页面的话,就没有办法使用这个保护机制. 只是为了前期的测试,可以注释掉settings.py中的中间键来取消这个验证 1# 'django.middleware.csrf.CsrfViewMiddleware', 这样看来,开发一个纯提供API的服务器,使用Django是无法提供安全保护的,需要使用其他途径来实现保护.]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基本数据类型的推导式]]></title>
    <url>%2F2017%2F10%2F17%2F%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%8E%A8%E5%AF%BC%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[处理序列中的数据时,比如提取其中的值或者根据某种标准来对序列做删减或替换使用推导式就非常方便. 列表推导式: 123456# 获取列表中大于0和小于0的数,返回的结果也要是列表info = [1,2,3,-1,-2,-3]need_info = [i for i in info if i &gt; 0]need_info2 = [i for i in info if i &lt; 0]print(need_info)print(need_info2) 12[1, 2, 3][-1, -2, -3] 如果先去遍历然后再重组就把代码写的繁琐,使用列表推导式去完成筛选,就显得干净利落. 12345# 将不符合条件的元素替换,返回的结果也得是列表info = [1,2,3,-1,-2,-3]# 将小于0的数替换成0need_info = [i if i &gt; 0 else 0 for i in info]print(need_info) 1[1, 2, 3, 0, 0, 0] 我真的想不出还有比这更方便快速的方法了. 字典推导式: 12345678910# 获取股价大于200的公司price = &#123; 'ACME': 45.23, 'AAPL': 612.78, 'IBM': 205.55, 'HPQ': 37.20, 'FB': 10.75&#125;com = &#123;key:value for key, value in price.items() if value &gt; 200&#125;print(com) 1&#123;'AAPL': 612.78, 'IBM': 205.55&#125; 除了字典和列表推导式,还有元组推导式以及利用生成器来筛选数据,如果考虑到性能的话,还需要对其他指标进行计算,不管性能如何,至少从书写方式上,也不会去选择写法繁琐的方式去实现想要的功能,]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安利一本有趣的书]]></title>
    <url>%2F2017%2F10%2F05%2F%E5%AE%89%E5%88%A9%E4%B8%80%E6%9C%AC%E6%9C%89%E8%B6%A3%E7%9A%84%E4%B9%A6%2F</url>
    <content type="text"><![CDATA[最近喜欢上了Python cookbook这本书,看到一些很科幻的模块感觉像打开了新世界的大门,虽然不太懂模块的底层是如何实现功能,但是能够顺手用起来也是一件不错的事情. 喜欢这本书的另外一个原因是,我再也不会因为看书看着看着就睡着了,我随时都要思考如何去使用其中介绍的语法,如何才能把这些东西用到我的工作中,就算有些方法暂时还用不到,但作为无聊时的消遣也是不错的选择. 它从基本的数据结构讲到面向对象再到高并发到最后的C扩展,基本囊括了初级工程师到中级工程师所需的所有技能,如果熟读这本书,调戏一下面试官也不是不可能的. 因为时间被挤的太多了,但是抽空去看看这本书收获还是很大的,我觉得把其中一些觉得有用的方法记录下来是必要的,将别人的知识变成自己的知识本身就是初级编程者必须的技能. 另外,吐槽一下kindel用起来真的不怎么样,电子书再怎么方便,我还是想回归最本质的读书方式,电子书也挺贵的,我不如买书.]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[序列中元素个数的计算]]></title>
    <url>%2F2017%2F09%2F30%2F%E5%BA%8F%E5%88%97%E4%B8%AD%E5%85%83%E7%B4%A0%E4%B8%AA%E6%95%B0%E7%9A%84%E8%AE%A1%E7%AE%97%2F</url>
    <content type="text"><![CDATA[在需要计算一个序列中的每个元素的出现的次数时,就拿最常见的列表来说,如果只通过列表中提供的count方法来计算某个元素出现的次数很难将元素和次数组合在一起. 在collections提供的Counter类就很好的解决了这一类问题,来看看它是如何实现元素的计数,并将元素与个数对应起来的吧 123456789from collections import Countera = ['a', 'b', 'b', 'a', 'c', 'd', 'a']counter = Counter(a)top = counter.most_common(1) # counter的实例调用most_common方法可以实现计算序列中前多少数量的元素detail_info = counter['a'] # 可以单独查询某个元素出现的次数,和list.count效果相同print(counter)print(top)print(detail_info) 123Counter(&#123;'a': 3, 'b': 2, 'c': 1, 'd': 1&#125;)[('a', 3)]3 可以看到Counter对象将元素与个数很好的对应起来了,需要注意的是作为Counter参数的序列元素必须要可哈希的,不然是无法处理的. 值得注意的是Counter对象还可以与数学运算结合起来,如 12345678a = ['a', 'b', 'b', 'a', 'c', 'd', 'a']b = ['a', 'd', 'e', 'g', 'z', 'a', 'a']counter1 = Counter(a)counter2 = Counter(b)add = counter1 + counter2sub = counter1 - counter2print(add)print(sub) 12Counter(&#123;'a': 6, 'b': 2, 'd': 2, 'c': 1, 'e': 1, 'g': 1, 'z': 1&#125;)Counter(&#123;'b': 2, 'c': 1&#125;) 加法可以将两个不同的对象相结合起来,但是如果是减法两个对象中都没有的元素进行相减不会有任何结果也没有输出.]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[序列的去重]]></title>
    <url>%2F2017%2F09%2F24%2F%E5%BA%8F%E5%88%97%E7%9A%84%E5%8E%BB%E9%87%8D%2F</url>
    <content type="text"><![CDATA[对所获取的的数据进行去重显得尤为重要,爬虫获取的冗余数据在大多时候都是都是无效且占用空间的. 设想有两个场景,一个是去除序列中出现的重复元素,获得的新序列是无序的,另外一个是去重获得新序列之后,依然是按照处理之前的顺序进行排列的. 无论是哪两种情况,序列的去重都是围绕set集合展开的,当然这也是set比较重要的属性. 对于第一种情况,直接使用set来处理就尤为简单 123a = [1,3,2,1,4,3]a = set(a)a = list(a) 1[1, 2, 3, 4] 可以看到输出的结果并不是按照原始顺序排列的,但依然有个问题就是转换后序列是按照升序排列的,最后测试一下,发现数据量较大时是不会出现这种情况的,集合并没有自动排序的功能. 对于第二种情况,想要去重并且顺序不发生改变,这里又有两种情况,一种是序列元素是可哈希的,另外一种是序列元素不可哈希的. 可哈希对象表示的是,在它生存期内是不可变的,如整数,浮点数,字符串,元组等. 对于可哈希元素: 12345678a = [1,3,2,1,4,5]def judge(items): seen = set() for item in items: if item not in seen: yield item seen.add(item)b = list(judge(a)) 1[1, 3, 2, 4, 5] 使用这种方法,可以实现不打乱顺序产生序列. 对于不可哈希元素: 123456789a = [&#123;'x':1, 'y':2&#125;, &#123;'x':1, 'y':3&#125;, &#123;'x':1, 'y':2&#125;]def judge(items, key=None): seen = set() for item in items: val = item if key is None else key(item) if val not in seen: yield item seen.add(val)b = list(judge(a, key = lambda key:(key['x'], key['y']))) 1[&#123;'x': 1, 'y': 2&#125;] 如果容器中的元素为不可哈希元素时,需要使用这种方法来进行去重才能保证保持元素的顺序,这种方法同时也可以实现容器中元素为可哈希的情况.]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[QuerySet与QueryDict]]></title>
    <url>%2F2017%2F09%2F17%2FQuerySet%E4%B8%8EQueryDict%2F</url>
    <content type="text"><![CDATA[QuerySet,本质上是一个给定的模型的对象列表,虽然名字中带有set,刚开始会让我觉得其性质应该和集合有些许联系,但是就像Java和javascript那样,就是彻彻底底两种不同的语言,为什么说他是对象列表而不是像其名字那样的集合呢,因为它是有序的,并且表现形式上也更像是一个列表 1&lt;QuerySet [&lt;Cus: Cus object&gt;, &lt;Cus: Cus object&gt;]&gt; 对于QuerySet最为神奇的就是,可以将返回的QuerySet链起来形成一串连续的查询 123Book.objects.filter(year_published__gt=1990) \ .exclude(author=&apos;Richard Dawkins&apos;) \ .order_by(&apos;author&apos;, &apos;-year_published&apos;) 并且也可以像列表那样,通过index去获取所需的第几条信息,当然使用遍历去获取其中的每一条信息也是没问题的. QueryDict是HttpRequest获取的对象,GET和POST属性是django.http.QuertDict类的实例,数据结构类似于字典,以键值对的形式存在,但是和字典最大的区别就是,QueryDict允许存在相同的键. 1&#123;&apos;info&apos;:[&apos;zsb&apos;, 111]&#125; QueryDict中数据获取方式可以像字典那种使用dict[‘info’]或者dict.get(‘info’),不过需要注意的是,如果存在一键对于多值,使用get只会获得最后一个值,如果想要获取所有的值就需要使用 1dict.getlist(&apos;info&apos;)]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[简单但有效的csrf_token]]></title>
    <url>%2F2017%2F09%2F10%2F%E7%AE%80%E5%8D%95%E4%BD%86%E6%9C%89%E6%95%88%E7%9A%84csrf-token%2F</url>
    <content type="text"><![CDATA[在说起表单提交发起POST请求之前,我需要聊一聊CSRF(跨站请求伪造),当然百度上一大堆CSRF的概念,我就用找到的一张图来说明这个概念吧. 所以Django为我们提供了一种用来防御它的非常容易使用的系统,简而言之,就是每次使用POST请求时都应该使用{ % csrf_token % }来避免CSRF. 知道这个防护原理也是必要的: 在用户访问django的可信站点时，django反馈给用户的表单中有一个隐含字段csrftoken，这个值是在服务器端随机生成的，每一次提交表单都会生成不同的值。当用户提交django的表单时，服务器校验这个表单的csrftoken是否和自己保存的一致，来判断用户的合法性。当用户被csrf攻击从其他站点发送精心编制的攻击请求时，由于其他站点不可能知道隐藏的csrftoken字段的信息这样在服务器端就会校验失败，攻击被成功防御，这样就能避免被 CSRF 攻击。]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[模板中的过滤器]]></title>
    <url>%2F2017%2F08%2F28%2F%E6%A8%A1%E6%9D%BF%E4%B8%AD%E7%9A%84%E8%BF%87%E6%BB%A4%E5%99%A8%2F</url>
    <content type="text"><![CDATA[之前在模板中处理从视图接口中获得的数据时没有遇到过时间格式的数据,最近遇到在处理这种从Mysql中获得的时间格式数据时,发现放在模板中页面上呈现的格式有点问题 12zsb:July 10, 1994cjh:July 26, 1994 这种格式对于用户来说体验肯定是不好的,所以得修改成可读的格式,然后就发现了过滤器这块新大陆. 过滤器的主要作用就是在页面呈现之前对数据进行修改,符号是’|’,功能应该和Linux中管道的用法类似,因为符号相同,所以就联想到那里去了,过滤器中提供了很多帮助程序员处理数据的语法,我就归纳了几个看起来常用的方法,如果以后遇到了其他的继续补充就是了. 加减法: 12&#123;&#123; stu.stu_yuwen | add:10 &#125;&#125;&#123;&#123; stu.stu_yuwen | add:-10 &#125;&#125; 因为计算机不会使用减号进行减法,记得是哪位老师上课的时候讲的,所以计算机进行减法计算的时候就是加上一个负数来实现减法,所以这里使用过滤器实现减法就是把add:10换成add:-10就OK了. 修改大小写: 12&#123;&#123; stu.stu_name | upper &#125;&#125;&#123;&#123; stu.stu_name | lower &#125;&#125; 实用场景还暂时没遇到,那就先记住吧. 修改时间格式: 12&#123;&#123; stu.stu_birth | date:&apos;Y-m-d&apos; &#125;&#125;&#123;&#123; stu.stu_birth | date:&apos;Y-m-d H:m:s&apos; &#125;&#125; 修改后: 11994-07-10 这里使用Y表示的是四位的年份,使用y是显示两位的年份,使用M,D显示的是英文的月和日,使用H表示的是24小时制,使用h表示的是12小时制.]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[模板中不同注释语句的用法]]></title>
    <url>%2F2017%2F08%2F24%2F%E6%A8%A1%E6%9D%BF%E4%B8%AD%E4%B8%8D%E5%90%8C%E6%B3%A8%E9%87%8A%E8%AF%AD%E5%8F%A5%E7%9A%84%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[html中的注释Djanog模板中的html我遇到过的两种注释,一种形式是&lt; !– – &gt;,另外一种是{ # # },刚开始并不清楚这两种的用法,所以用起来就很混乱,所以决定把所有的注释给归纳一下. 使用&lt; !– – &gt;来进行注释,被注释的语句或者语法从页面上是已经无法看见的,但是如果查看网页源码,依然可以从源码中看到被注释的内容. 这是html: 123456&lt;body&gt;&lt;!-- 这是内容 --&gt;&lt;!-- &#123;% for i in customer %&#125; --&gt; &lt;!-- &#123;&#123; i.u_name &#125;&#125; --&gt;&lt;!-- &#123;% endfor %&#125; --&gt;&lt;/body&gt; 这是源码: 123456789&lt;body&gt;&lt;!-- 这是内容 --&gt;&lt;!-- --&gt; &lt;!-- zsb --&gt;&lt;!-- --&gt; &lt;!-- cjh --&gt;&lt;!-- --&gt;&lt;/body&gt; 可以看出,不光是被注释的内容在源码中显示出来了,被注释的语法也依然运行成功,在源码中显示出了结果. 使用{ # # }来进行注释的话,就相对注释的更彻底,在页面和网页源码中都不会出现被注释的内容,只有维护的程序员才能看到这种注释. 这是html: 12345678&lt;body&gt;&#123;# 这是内容 #&#125;&#123;#&#123;% for i in customer %&#125;#&#125;&#123;# &#123;&#123; i.u_name &#125;&#125;#&#125;&#123;# &#123;% endfor %&#125;#&#125;&lt;/body&gt; 这是源码: 1234567&lt;body&gt;&lt;/body&gt; 可以看出,所有被注释的内容都不会被查看到,无论是页面还是源码中 我还是习惯性的ctrl + /来进行注释,使用{ # # }对我来说,可以防止产生一些不必要的错误. 另外,查阅资料发现Django模板中还提供了第三种注释方式,刚才两种都是单行注释,使用 { % comment % } { % endcomment % } 能够进行多行注释,这种注释和{ # # }效果是一样的. 12345&#123;% comment %&#125;&#123;% for i in customer %&#125; &#123;&#123; i.u_name &#125;&#125; &#123;% endfor %&#125;&#123;% endcomment %&#125; CSS中的注释因为html中会放入CSS和JS,所以会产生一种错觉,这三个东西使用的注释应该是同一种注释. 事实肯定不是我想的那样,CSS中的注释使用的是 12/*font-weight: 100;*//*这是一条注释*/ 使用该方法来添加我们的注释或者注释掉一些暂时不需要的代码 JS中的注释12// console.log(data);// 这是一条注释 使用//来添加代码的注释或者注释掉一些暂时不需要的代码 所以总结一下,HTML中注释有两种,一种是可执行的注释&lt; !– – &gt;,一种是不可执行的注释{ # # },CSS中的注释是/**/,JS中的注释是//.]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[模板的继承]]></title>
    <url>%2F2017%2F08%2F20%2F%E6%A8%A1%E6%9D%BF%E7%9A%84%E7%BB%A7%E6%89%BF%2F</url>
    <content type="text"><![CDATA[模板的继承主要好处就是将重复出现的代码加载在父模板中,后续的子模版直接继承可以简化页面布局. 父模板: 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt; &#123;% block title %&#125; &#123;# 这是标题 #&#125; &#123;% endblock %&#125; &lt;/title&gt; &#123;% block extCSS %&#125; &#123;# 这是样式表 #&#125; &#123;% endblock %&#125;&lt;/head&gt;&lt;body&gt;&#123;% block top %&#125; &#123;# 这是网页头部 #&#125;&#123;% endblock %&#125;&#123;% block content %&#125; &#123;# 这是网页内容 #&#125;&#123;% endblock %&#125;&#123;% block bottom %&#125; &#123;# 这是网页底部 #&#125;&#123;% endblock %&#125;&#123;% block extJS %&#125; &#123;# 这是js #&#125;&#123;% endblock %&#125;&lt;/body&gt;&lt;/html&gt; 子模版: 123456789101112131415&#123;% extends 'base.html' %&#125; &#123;% block title %&#125; &#123;% endblock %&#125; &#123;% block extCSS %&#125; &#123;% endblock %&#125;&#123;% block content %&#125;&#123;% endblock %&#125;&#123;% block extJS %&#125;&#123;% endblock %&#125; 模板的继承需要注意的是: 子模版继承父模板后,子模版原先的内容就不会显示,只能继承或者重写父模板中的block模块. 子模版会继承父模板所有的block模块,如果不进行重写就会显示父模板block中的内容.]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无题]]></title>
    <url>%2F2017%2F08%2F16%2F%E6%97%A0%E9%A2%98%2F</url>
    <content type="text"><![CDATA[我希望有一天能像你一样,读上世界最好的大学,也希望你能在大洋彼岸乘风破浪.]]></content>
  </entry>
  <entry>
    <title><![CDATA[全局设置中路径的配置]]></title>
    <url>%2F2017%2F08%2F01%2F%E5%85%A8%E5%B1%80%E8%AE%BE%E7%BD%AE%E4%B8%AD%E8%B7%AF%E5%BE%84%E7%9A%84%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[在settings.py文件中进行模板,静态文件等的路径配置刚开始把我给绕晕了,以前没有接触到路径这一块时总感觉绝对路径多么多么好,简洁明了一眼就能看出是哪个盘哪个文件,最后发现只有windos系统才有盘符,其他系统都没有这个玩意,还有反斜杠,瞬间觉得微软才是异类. 在settings.py中BASE_DIR代表当前根目录文件的路径 1BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) 刚开始的连续的三个os.path真的把我吓住了,一眼看上去真的很复杂,然后我从里层从外层打印,分清了os.path.abspath和os.path.dirname的区别 12 12345C:\Users\29427\Desktop\sub_pyC:\Users\29427\Desktop\sub_py\test_path.pyC:\Users\29427\DesktopC:\Users\29427C:\Users\29427\Desktop 所以abspath是获得该文件的绝对路径包括文件名,dirname是获得该文件的绝对路径不包括文件名. 由上可以得出,BASE_DIR可以用下述代码进行替换 1BASE_DIR = os.path.dirname(os.path.dirname(__file__)) 在全局配置中的BASE_DIR最后得到的路径就是项目根目录的路径,将这个路径与template,media,static文件夹相拼接,就得到了相应所需的路径,比如 12STATIC_URL = '/static/'STATICFILES_DIRS = os.path.join(BASE_DIR, STATIC_URL)]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[F对象和Q对象]]></title>
    <url>%2F2017%2F07%2F26%2FF%E5%AF%B9%E8%B1%A1%E5%92%8CQ%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[要从数据库中查找满足某种对比条件的样本时,会使用到Django中自带的F对象,但是需要手动导入这个模块. 12gra = Grade.objects.filter(g_name='python').first()stu = gra.stu_set.filter(stu_yuwen__gte=F('stu_shuxue')) 查询一个班级中语文成绩大于等于数学成绩的学生,需要知道的是如果是直接比较而不通过F对象的话,会直接出现小红线报错. 如果我要去查询同时满足多个条件的样本时,有两种方法,一种是直接用逗号分割条件, 123gra = Grade.objects.filter(g_name='python').first()stu = gra.stu_set.filter(stu_yuwen__gte=80, stu_sex=0) 另外一种是使用Q查询对象,该对象不仅提供了’与’的运算,同时还支持’或’,’非’运算, 123gra = Grade.objects.filter(g_name='python').first()stu = gra.stu_set.filter(Q(stu_yuwen__gte=80) &amp; Q(stu_sex=0)) 查询一个班级中语文成绩大于等于80并且性别为女生的样本,Q对象提供了&amp;,|,~三种逻辑运算,所以可以很方便进行筛选查找,同样也需要手动导入. 也可以同时在一条查询语句中同时使用这两种对象, 12gra = Grade.objects.filter(g_name='python').first()stu = gra.stu_set.filter(Q(stu_yuwen__gte=F('stu_shuxue') + 10) &amp; Q(stu_sex=1)) 查询一个语文成绩大于等于数学成绩加10分并且性别是男生的样本.]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[时间与空间的矛盾]]></title>
    <url>%2F2017%2F07%2F21%2F%E6%97%B6%E9%97%B4%E4%B8%8E%E7%A9%BA%E9%97%B4%E7%9A%84%E7%9F%9B%E7%9B%BE%2F</url>
    <content type="text"><![CDATA[记得以前上软件技术导论的时候,听的最多的话就是时间和空间是两个不可调和的矛盾,要么去拥有时间,要么去拥有空间,当然如果一个算法中即不节省空间,也不节约空间,那这就是个失败的算法. 这两者是不可同时兼得的,就拿Python中的数据类型来说 123456789import syslist_ = []tupel_ = ()dic_ = &#123;&#125;set_ = set([])print('%s,%s' % (type(list_), sys.getsizeof(list_)))print('%s,%s' % (type(tupel_), sys.getsizeof(tupel_)))print('%s,%s' % (type(dic_), sys.getsizeof(dic_)))print('%s,%s' % (type(set_), sys.getsizeof(set_))) 1234&lt;class 'list'&gt;,64&lt;class 'tuple'&gt;,48&lt;class 'tuple'&gt;,240&lt;class 'set'&gt;,224 可以看到,列表和元组所占内存较小,而字典和集合占的内存较大,所以可以这样理解,当我们去查询某一个元素是否在列表或者字典中时,列表查找的时间复杂度是O(n),而字典查找的时间复杂度是O(1),字典牺牲了空间换取了时间. 我只是很肤浅的从这里看到了一点关于时间与空间的矛盾,我相信通过不断的深入学习,应该会遇到更多的这种情况.]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python中基本的数据结构]]></title>
    <url>%2F2017%2F07%2F20%2FPython%E4%B8%AD%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[我并没有系统的学过数据结构,顶多也就是自己买了本严蔚敏的数据结构看了一下,所以在遇到一些这方面问题就是真的头大,今天看书时发现了Python中collentions.OrderedDict这个模块中有一种内部维持双向链路的有序字典对象,就忽然想去学习一下顺序表,链表的知识. Python中有有序和无序的数据类型,像set,dict是无序的,而list,tuple是有序的.首先集合和字典是基于哈希表实现,对于这两个类型的理解,我认为集合就是只有键没有值的字典,因为翻阅了下资料,发现Python在最开始时是并没有set这个概念的,最早的set雏形就是{‘a’:None, ‘b’:None}这种字典.还有一个更为奇怪的是,字典本身是无序的,但是使用IDE去输出打印时总会按照我赋值的顺序输出字典,我只能归咎于IDE帮我处理了这个字典,在内存中,这个字典每一组键值对的排列都不是按照我赋值的顺序存储的. 对于有序的list和tuple来说,它们是由顺序表实现的,元组和列表最大的区别有两个,一是元组是不可变类型,即不变的顺序表,它不支持任何改变其内部状态的操作,而列表刚好相反,列表被定义为动态的顺序表,也就是说我可以对其进行appent,inset,pop等操作,另外一个区别是元组是可以去重的,而列表是可以允许有重复元素的. 由于在创建一个顺序表时,需要预先知道数据大小来申请连续的存储空间,而在进行扩充时又会使用copy来开辟一段新的内存空间,所有使用起来并不是很灵活,所以为了充分利用计算机内存空间,实现灵活的动态管理,就得使用到链表. 链表也是一种线性表,但是并不是连续的存储数据,而是每一个节点里存放下一个节点的位置信息,每个节点包含两个域.一个是信息域(用来存放数据),一个是链接域(用来查找下一个节点). 单向链路: 双向链路: 单向链路只能通过前一个节点查找后一节点并且不可逆,双向链路是可逆的,除此之外还有单向循环链路和双向循环链路,也就是tail的地址不再指向None而是head的地址. 但是需要明确的是,链路只是灵活的使用了内存,但付出的代价是增加了地址字段,开销增大,所以说并没有什么完美的算法能够保证又节约时间,又节省空间.]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Python,数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django通过Model查找数据遇到的问题]]></title>
    <url>%2F2017%2F07%2F16%2FDjango%E9%80%9A%E8%BF%87Model%E6%9F%A5%E6%89%BE%E6%95%B0%E6%8D%AE%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[我先建立了一个学生与学生信息的一对一关系模型 123456789101112131415161718class Stu(models.Model): stu_name = models.CharField(max_length=6, unique=True) stu_sex = models.BooleanField(default=0) stu_birth = models.DateField() class Meta: db_table= 'stu'class StuInfo(models.Model): stu_addr = models.CharField(max_length=30) stu_age = models.IntegerField() stu = models.OneToOneField(Stu) class Meta: db_table = 'stu_info' 我根据学生去查找学生信息 1234stu = Stu.objects.all().first()stu_info = stu.StuInfoprint(stu_info.stu_addr)return render(request, 'show_stu.html') 我想在调用url时,在控制台打印出我查询的数据,然后就出现报错 12Exception Value: 'Stu' object has no attribute 'StuInfo' 我通过对象去点上模型名,这样没问题啊,为什么会显示没有这个属性呢? 折腾了一下,发现把表名改为小写就可以查询了 1stu_info = stu.stuinfo 所以说在数据库查询的时候,不管是一对一还是多对多,点上表名的时候都得用小写. 如果对于某些有强迫症的人,就必须要用表名去查询数据的话,可以使用这个来指定查询的相对名字 12class Meta: default_related_name = 'StuInfo']]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django简介]]></title>
    <url>%2F2017%2F07%2F15%2FDjanogo%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[Django介绍:Django是一个开放源代码的Web应用框架，由Python写成。采用了MVC的框架模式，即模型M，视图V和控制器C。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。 要是以后我能发明一种框架,我一定要用自己的名字来命名,以免我被淹没在历史的洪流里. 在学习Django的时候和一些搞Java开发的同学聊过几次,他们经常抱怨外包到华为天天写控制器,当时我挺羡慕的,控制器多高端啊,其实现在想起来我应该是忽略了天天这两个字,但是学了之后也没那么高端,至少没有Python的scipy那几个模块高端. 师从MVC:Django的框架模式从本质来说依然是经典的MVC,就来看看MVC这个Web开发大佬是如果运作的. 我就按照自己的理解来说一下这个moderl-view-controller,即模型-视图-控制器 Model: 这一块是直接与数据库相关的,也就是模型对象负责在数据库中存取数据 View: 这一块负责数据的显示和呈现,数据呢,肯定是从model那里来的,数据展示在哪里?通过html页面来进行展示,不过现在应该不仅限于html. Controller: 这一块负责人机交互,从用户端收集用户的输入,进行业务逻辑处理. 模式图奉上: 核心思想: 将输入,处理,输出分开,即解耦 不逊色的MVT:我喜欢称Django的框架模式为变异的MVC,但归根结底也是继承于MVC,我本来就对控制器不是太了解,要是我精通Java就好了,这下好了,Django直接就没有控制器这一说法. Moder-View-Template,即模型-视图-模板,从字面上感觉像是用模板来替代了控制器,但并不是 Model: 作用与MVC的model一样,负责与数据库的连接,进行数据的存取 View: Django的View活动范围就有点广,他首先负责业务逻辑,然后还要调用Moder和Template,它并不像MVC的视图那样为用户呈现数据. Template: 模板的功能与MVC的视图一样,负责进行页面的渲染展示给用户 Django还有个特别的url分发器,作用和路由器差不多,所有也称之为路由,作用是通过页面传回的url来调用合适的view.]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[这不仅仅是一个开始]]></title>
    <url>%2F2017%2F07%2F14%2F%E8%BF%99%E4%B8%8D%E4%BB%85%E4%BB%85%E6%98%AF%E4%B8%80%E4%B8%AA%E5%BC%80%E5%A7%8B%2F</url>
    <content type="text"><![CDATA[我想所有的编程语言都是以善意的问候世界开始它们独特魅力的吧,我也记不清楚我用了几种语言在控制台输出Hello,World,我只知道在我学习单片机的时候抱怨C语言指针太难看不懂,也记得学习立志学习Java却在中途发现Python的输出打印如此简洁转而跑去学习Python. 在学习Python后我没有太多接触其他语言,一方面是因为害怕遇到语法更美丽,书写更简洁的语言又放弃Python,另一方面想拜读的那位导师建议我去学Python,虽然最后没有机会成为他的学生. 我考研报考的是大数据方向,其实在本科大多数都是在和硬件打交道,对于大数据也只是经常看见新闻吹的玄乎玄乎的,所以我就想去考,当时院长也说川大的计算机学院还是很厉害的,还说我上了复试线可以帮我找个好导师,到最后我去参加复试,院长却退休了,真的悲伤. 无论是什么语言,我都觉得这仅仅是一种工具,一种用来表现人类行为的工具,最为重要的是如何使用这门语言来模拟我们的行为并且来实现它. 昨天我为我的Python之路好好规划了一下,首先肯定是最常见的Web开发,然后是爬虫,数据分析,大数据,虽然不清楚在到第几个阶段我会跑去读书,但肯定的是书是一定要读的,我总不能被女朋友文凭一直给压着吧. 那就从今天开始吧,我上有老但不需要我养,我爸那天还说以后工作了别让他们倒贴就万事大吉,无奈.我下又无小,何不轻装前行?]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F06%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[MySQL主从配置]]></title>
    <url>%2F2017%2F01%2F14%2FMySQL%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[MySQL的主从配置比redis的主从相比要轻松的多,可能我参与的比较少吧,但是基本的主从配置还是没有问题的. 主配置主从主要实现的是读写分离,这样做法的优势有很多,我所理解的一个是缓解服务器的读写压力. 在Ubuntu下,配置文件为my.cnf,位置为/etc/mysql/my.cnf 在windows下,配置文件为my.ini vim my.cnf # 进入配置文件进行设定 server-id=200 # 设置主服务器的ID,主和从的id号不能相同 innodb_flush_log_at_trx_commit=2 # 防止断电数据丢失 sync_binlog=1 # 开启binlog日志同步功能 log-bin=mysql-bin-200 # binlog日志文件名 binlog-do-db=xxx # 这个表示同步哪个库,不写的话表示同步所有的库 主配置完成后,重启主库service mysql restart mysql -uroot -p # 登陆 grant replication slave on . to ‘‘mark‘@’192.168.1.201’ identified by ‘123456’; # 授权给从数据库服务器192.168.1.201, 用户名mark, 密码123456 show master status; # 查看主库的状态 从配置vim my.cnf server-id = 201 # 不能和主ID一样 innodb_fiush_log_at_trx_commit=2 sync_binlog=1 log-bin=mysql-bin-201 从配置完成后,重启重库service mysql restart mysql -uroot -p change master to master_host=’192.168.1.200’, master_user=’mark’,master_password=’123456’,master_log_file = ‘mysql-bin-200.000002’,master_log_pos=1167; # 这里是建立与主服务器的连接,master_log_pos需要查看主数据库中position的数值 start slave; # 开启从库 show slave status; # 查看从数据库状态 验证主从主从中的数据库需要相同,主数据库在进行改动时,从数据库是可以查看的,主数据库负责写,从数据库负责读,分摊数据库压力.]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL性能优化]]></title>
    <url>%2F2017%2F01%2F11%2FMySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[修改back_logback_log值表示MySQL的连接数据达到max_connections时,有多少请求能够被放在堆栈之中以等待其他连接释放.如果等待连接的数量超过back_log时,就不被授予连接资源. show variables like ‘back_log’:查看当前数量 网上说默认值是50, 但是我查出来是80,反正如果要根据当前需求来改变数量,可以在my.ini中将back_log的值修改为500,理论上可以无限增大的,但是会收到系统网卡等的限制. 修改wait_timeoutwait_timeout值表示服务器关闭非交互连接之前等待活动的秒数,而interactive_timeout表示的交互式连接等待的秒数,当网站有大量的MySQL连接请求时,设置这个wait_timeout值就非常重要,可以将超时的连接关闭,避免资源的损失. 将wait_timeout从8小时修改为30分钟,wait_timeout=1800 修改max_connectionsmax_connections指MySQL的最大连接数,在并发连接较大时可以适当增大这个连接数,但是增大连接就意味着更多的内存开销,只能在适当的范围内调节. MySQL服务器允许的最大连接数16384 show variables like ‘max_connections’查看当前连接数 可以将默认的max_connections值151,修改为3000 修改max_user_connectionsmax_user_connections指同一个账号能够同时连接MySQL服务的最大连接数. 默认值为0表示不受限制,根据实际需求进行调节. 要与Max_used_connections的区分开来,后者是表示过去的某段时间最大的连接数. show variables like ‘max_user_connections’查看当前值 修改thread_concurrencythread_concurrency指表示开启的线程数,一般根据服务器的CPU核数进行设定,线程数等于CPU x 2 show variables like ‘thread_concurrency’查看默认值]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
</search>
